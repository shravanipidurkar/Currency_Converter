/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package com.mycompany.currency_convertor;

import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.JSONObject;
/**
 *
 * @author SHRAVANI
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jexit = new javax.swing.JButton();
        jconvertor1 = new javax.swing.JButton();
        jreset1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jConverted = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jAmount = new javax.swing.JTextField();
        jFrom = new javax.swing.JComboBox<>();
        jTo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(95, 158, 160), 10));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jexit.setBackground(new java.awt.Color(153, 255, 255));
        jexit.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jexit.setText("Exit");
        jexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jexitActionPerformed(evt);
            }
        });
        jPanel1.add(jexit, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, 140, 30));

        jconvertor1.setBackground(new java.awt.Color(153, 255, 255));
        jconvertor1.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jconvertor1.setText("Convert");
        jconvertor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jconvertor1ActionPerformed(evt);
            }
        });
        jPanel1.add(jconvertor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, 140, 30));

        jreset1.setBackground(new java.awt.Color(153, 255, 255));
        jreset1.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jreset1.setText("Reset");
        jreset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jreset1ActionPerformed(evt);
            }
        });
        jPanel1.add(jreset1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 140, 30));

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(95, 158, 160), 10));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        jLabel5.setText("Amount Converted");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 260, 40));

        jConverted.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jPanel3.add(jConverted, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, 390, 40));

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(95, 158, 160), 10));
        jPanel4.setForeground(new java.awt.Color(204, 204, 255));
        jPanel4.setToolTipText("");
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Bell MT", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Currency Convertor");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, -10, 560, 130));

        jLabel1.setBackground(new java.awt.Color(204, 255, 204));
        jLabel1.setText("~Shravani Pidurkar");
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 70, -1, 20));

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(95, 158, 160), 10));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        jLabel2.setText("From Country");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 260, 40));

        jLabel6.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        jLabel6.setText("Amount");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 260, 40));

        jLabel7.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        jLabel7.setText("To Country");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, 260, 40));

        jAmount.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAmountActionPerformed(evt);
            }
        });
        jPanel2.add(jAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, 360, 30));

        jFrom.setBackground(new java.awt.Color(204, 204, 255));
        jFrom.setEditable(true);
        jFrom.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jFrom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "USD - US Dollar (USD)", "INR - Indian Rupee (INR)", "JPY - Japanese Yen (JPY)", "GBP - British Pound (GBP)", "EUR - Euro (EUR)", "CAD - Canadian Dollar (CAD)", "AUD - Australian Dollar (AUD)", "CHF - Swiss Franc (CHF)", "CNY - Chinese Yuan (CNY)", "RUB - Russian Ruble (RUB)", "BRL - Brazilian Real (BRL)", "MXN - Mexican Peso (MXN)", "ZAR - South African Rand (ZAR)", "TRY - Turkish Lira (TRY)", "KRW - South Korean Won (KRW)" }));
        jPanel2.add(jFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 70, 360, 30));

        jTo.setBackground(new java.awt.Color(204, 204, 255));
        jTo.setEditable(true);
        jTo.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "INR - Indian Rupee (INR)", "USD - US Dollar (USD)", "JPY - Japanese Yen (JPY)", "GBP - British Pound (GBP)", "EUR - Euro (EUR)", "CAD - Canadian Dollar (CAD)", "AUD - Australian Dollar (AUD)", "CHF - Swiss Franc (CHF)", "CNY - Chinese Yuan (CNY)", "RUB - Russian Ruble (RUB)", "BRL - Brazilian Real (BRL)", "MXN - Mexican Peso (MXN)", "ZAR - South African Rand (ZAR)", "TRY - Turkish Lira (TRY)", "KRW - South Korean Won (KRW)" }));
        jPanel2.add(jTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 110, 360, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                .addGap(4, 4, 4)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private JFrame frame;
    private void jexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jexitActionPerformed
        // TODO add your handling code here:
        frame = new JFrame("Exit");
        if(JOptionPane.showConfirmDialog(frame,"Confirm if you want to exit","Currency Converter",
            JOptionPane.YES_NO_OPTION)==JOptionPane.YES_NO_OPTION  )
    {
        System.exit(0);
        }
    }//GEN-LAST:event_jexitActionPerformed

    private void jconvertor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jconvertor1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Button Clicked"); 
        
        String amountText = jAmount.getText().trim();
        
        if (amountText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "The amount field cannot be empty!", "Input Error", JOptionPane.ERROR_MESSAGE);
         return; 
        }   
        if (!amountText.matches("\\d+(\\.\\d+)?")) {
         JOptionPane.showMessageDialog(null, "Please enter a valid numeric value in the amount field.", "Input Error", JOptionPane.ERROR_MESSAGE);
         return; 
        }
        
        double amount;
        String fromCurrency;
        String toCurrency;
        double convertedAmount;
        amount = Double.parseDouble(jAmount.getText());
        System.out.println("Amount: " + amount); 
        fromCurrency = jFrom.getSelectedItem().toString().substring(0, 3);
        toCurrency = jTo.getSelectedItem().toString().substring(0, 3);
        System.out.println("From: " + fromCurrency + ", To: " + toCurrency);
        
        try {
            boolean isOnline = isOnline();
           String conversionData;
           if (isOnline) {
               // Fetch fresh data from the API when online
               conversionData = fetchConversionDataFromApi();
               cacheConversionData(conversionData); // Cache the data for offline use
            } else {
               // Load cached data when offline
              conversionData = loadConversionDataFromCache();
            }
            // Perform currency conversion based on fresh or cached data
            convertedAmount = performConversion(amount, fromCurrency, toCurrency, conversionData);
            System.out.println("Converted Amount: " + convertedAmount);
            jConverted.setText(String.format("%.3f %s", convertedAmount, toCurrency));
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jconvertor1ActionPerformed

    private void jreset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jreset1ActionPerformed
        // TODO add your handling code here:
        jAmount.setText("");           
        jConverted.setText("");        
        jFrom.setSelectedIndex(-1);    
        jTo.setSelectedIndex(-1);      
    }//GEN-LAST:event_jreset1ActionPerformed

    private void jAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jAmountActionPerformed
//=============================================================================================================================
    private static final String CACHE_FILE = "conversionCache.json"; // Cache file for conversion data
    private static final String API_KEY = " "; // API Key
    private static final String API_URL = String.format("https://data.fixer.io/api/latest?access_key=%s", API_KEY); // API URL

    private static String fetchConversionDataFromApi() throws Exception {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_URL))
                .header("apikey", API_KEY)
                .GET()
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        if (response.statusCode() == 200) {
            return response.body();
        } else {
            throw new Exception("API Error: " + response.body());
        }
    }

    // Function to cache conversion data locally
    private static void cacheConversionData(String data) throws IOException {
        Files.write(Paths.get(CACHE_FILE), data.getBytes());
    }

    // Function to load conversion data from cache
    private static String loadConversionDataFromCache() throws IOException {
        if (Files.exists(Paths.get(CACHE_FILE))) {
            return new String(Files.readAllBytes(Paths.get(CACHE_FILE)));
        } else {
            throw new IOException("Cache file not found.");
        }
    }

    // Main Function to perform the currency conversion
    private static double performConversion(double amount, String fromCurrency, String toCurrency, String conversionData) throws Exception {
        JSONObject jsonResponse = new JSONObject(conversionData);

        if (jsonResponse.has("rates")) {
            JSONObject rates = jsonResponse.getJSONObject("rates");
            if (rates.has(fromCurrency) && rates.has(toCurrency)) {
                double fromRate = rates.getDouble(fromCurrency);
                double toRate = rates.getDouble(toCurrency);
                return (amount / fromRate) * toRate; // Conversion calculation
            } else {
                throw new Exception("Currency not supported: " + fromCurrency + " or " + toCurrency);
            }
        } else {
            throw new Exception("Invalid API response: 'rates' key not found.");
        }
    }

    // Function to check if the system is online
    private static boolean isOnline() {
        try {
            return URI.create("http://www.google.com").toURL().openConnection().getInputStream() != null;
        } catch (IOException e) {
            return false;
        }
    }

//============================================================================================================================
//    public static double convertCurrency(double amount, String fromCurrency, String toCurrency) throws Exception {
//        // Defining API key and URL
//        String apiKey = " ";
//        String apiUrl = String.format("https://data.fixer.io/api/latest?access_key=%s", apiKey);
//
//        HttpClient client = HttpClient.newHttpClient();
//        HttpRequest request = HttpRequest.newBuilder()
//                .uri(URI.create(apiUrl))
//                .header("apikey", apiKey)
//                .GET()
//                .build();
//        // Send request and get response
//        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
//        System.out.println("API Response: " + response.body());
//        if (response.statusCode() == 200) {
//            JSONObject jsonResponse = new JSONObject(response.body());
//            if (jsonResponse.has("rates")) {
//                JSONObject rates = jsonResponse.getJSONObject("rates");
//                if (rates.has(fromCurrency) && rates.has(toCurrency)) {
//                    double fromRate = rates.getDouble(fromCurrency);
//                    double toRate = rates.getDouble(toCurrency);
//                    return (amount / fromRate) * toRate; //rate calculation
//                } else {
//                    throw new Exception("Currency not supported: " + fromCurrency + " or " + toCurrency);
//                }
//            } else {
//                throw new Exception("Invalid API response: 'rates' key not found.");
//            }
//        } else {
//            throw new Exception("API Error: " + response.body());
//        }
//}
//========================================================================================================================
 
public class Currency_convertor {

    public static void main(String[] args) {
        System.out.println("Welcome to my currency convertor!");
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jAmount;
    private javax.swing.JTextField jConverted;
    private javax.swing.JComboBox<String> jFrom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JComboBox<String> jTo;
    private javax.swing.JButton jconvertor1;
    private javax.swing.JButton jexit;
    private javax.swing.JButton jreset1;
    // End of variables declaration//GEN-END:variables
}
